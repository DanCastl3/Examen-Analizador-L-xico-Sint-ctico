
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CADENA COMA COUNT COUT DIVIDIDO ID IGNORENAME INCLUDE INT IOSTREAM LLAVE_ABIERTA LLAVE_CERRADA MAS MENOS NAMESPACE NUMERO OPERADOR PABIERTO PCERRADO POR RETURN SIMBOLO USINGdeclaraciones : declaracion declaraciones\n                     | operacion declaraciones\n                     | imprimir declaraciones\n                     | emptydeclaracion : INT ID SIMBOLOexpresion : NUMERO\n                  | ID\n                  | expresion MAS expresion\n                  | expresion MENOS expresion\n                  | expresion POR expresion\n                  | expresion DIVIDIDO expresionoperacion : expresion SIMBOLOimprimir : COUNT PABIERTO CADENA PCERRADO SIMBOLO\n                 | COUT PABIERTO CADENA PCERRADO SIMBOLOempty :'
    
_lr_action_items = {'INT':([0,2,3,4,16,23,32,33,],[6,6,6,6,-12,-5,-13,-14,]),'COUNT':([0,2,3,4,16,23,32,33,],[9,9,9,9,-12,-5,-13,-14,]),'COUT':([0,2,3,4,16,23,32,33,],[10,10,10,10,-12,-5,-13,-14,]),'$end':([0,1,2,3,4,5,12,13,14,16,23,32,33,],[-15,0,-15,-15,-15,-4,-1,-2,-3,-12,-5,-13,-14,]),'NUMERO':([0,2,3,4,16,17,18,19,20,23,32,33,],[11,11,11,11,-12,11,11,11,11,-5,-13,-14,]),'ID':([0,2,3,4,6,16,17,18,19,20,23,32,33,],[7,7,7,7,15,-12,7,7,7,7,-5,-13,-14,]),'SIMBOLO':([7,8,11,15,24,25,26,27,30,31,],[-7,16,-6,23,-8,-9,-10,-11,32,33,]),'MAS':([7,8,11,24,25,26,27,],[-7,17,-6,17,17,17,17,]),'MENOS':([7,8,11,24,25,26,27,],[-7,18,-6,18,18,18,18,]),'POR':([7,8,11,24,25,26,27,],[-7,19,-6,19,19,19,19,]),'DIVIDIDO':([7,8,11,24,25,26,27,],[-7,20,-6,20,20,20,20,]),'PABIERTO':([9,10,],[21,22,]),'CADENA':([21,22,],[28,29,]),'PCERRADO':([28,29,],[30,31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaraciones':([0,2,3,4,],[1,12,13,14,]),'declaracion':([0,2,3,4,],[2,2,2,2,]),'operacion':([0,2,3,4,],[3,3,3,3,]),'imprimir':([0,2,3,4,],[4,4,4,4,]),'empty':([0,2,3,4,],[5,5,5,5,]),'expresion':([0,2,3,4,17,18,19,20,],[8,8,8,8,24,25,26,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declaraciones","S'",1,None,None,None),
  ('declaraciones -> declaracion declaraciones','declaraciones',2,'p_declaraciones','app.py',65),
  ('declaraciones -> operacion declaraciones','declaraciones',2,'p_declaraciones','app.py',66),
  ('declaraciones -> imprimir declaraciones','declaraciones',2,'p_declaraciones','app.py',67),
  ('declaraciones -> empty','declaraciones',1,'p_declaraciones','app.py',68),
  ('declaracion -> INT ID SIMBOLO','declaracion',3,'p_declaracion','app.py',72),
  ('expresion -> NUMERO','expresion',1,'p_expresion','app.py',76),
  ('expresion -> ID','expresion',1,'p_expresion','app.py',77),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion','app.py',78),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion','app.py',79),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion','app.py',80),
  ('expresion -> expresion DIVIDIDO expresion','expresion',3,'p_expresion','app.py',81),
  ('operacion -> expresion SIMBOLO','operacion',2,'p_operacion','app.py',85),
  ('imprimir -> COUNT PABIERTO CADENA PCERRADO SIMBOLO','imprimir',5,'p_imprimir','app.py',89),
  ('imprimir -> COUT PABIERTO CADENA PCERRADO SIMBOLO','imprimir',5,'p_imprimir','app.py',90),
  ('empty -> <empty>','empty',0,'p_empty','app.py',94),
]
